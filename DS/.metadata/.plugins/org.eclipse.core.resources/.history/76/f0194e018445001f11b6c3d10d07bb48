package com.prac.circulardoublelinkedlist;

public class CircularDoublyLinkedList {
	public DoublyNode head;
	public DoublyNode tail;
	public int size;
	
	// create CDLL
	DoublyNode createCDLL(int nodeValue) {
		head = new DoublyNode(); // -------------------------------> O(1)
		DoublyNode newNode = new DoublyNode();
		newNode.value = nodeValue;
		head = newNode;
		tail = newNode;
		newNode.next = newNode;
		newNode.prev = newNode;
		size = 1;
		return head; // -------------------------------> O(1)
		// -------- Time Complexity : O(1), Space Complexity : O(1).
	}
	
	public void insertNode(int nodeValue, int location) {
        if (location > size) {
            System.out.println("Insertion location is out of bounds.");
            return;
        }
        
        DoublyNode newNode = new DoublyNode(); // -------------------------------> O(1)
        newNode.value = nodeValue; // -------------------------------> O(1)
        if (head == null) { 
            createCDLL(nodeValue);
            return;
        } else if (location == 0) {
            newNode.next = head;
            newNode.prev = tail;
            head.prev = newNode;
            tail.next = newNode;
            head = newNode;
            System.out.println("Node inserted with value: " + nodeValue + " at location 0");
        } else if (location == size) {
            newNode.next = head;
            newNode.prev = tail;
            head.prev = newNode;
            tail.next = newNode;
            tail = newNode;
            System.out.println("Node inserted with value: " + nodeValue + " at location " + location);
        } else {
            DoublyNode tempNode = head;
            int index = 0; // -------------------------------> O(1)
            while (index < location - 1) { // -------------------------------> O(N)
                tempNode = tempNode.next;
                index++;
            }
            newNode.prev = tempNode;
            newNode.next = tempNode.next;
            tempNode.next = newNode;
            newNode.next.prev = newNode; 
            System.out.println("Node inserted with value: " + nodeValue + " at location " + location);
        } 
        size++; // -------------------------------> O(1)
        // -------- Time Complexity : O(N), Space Complexity : O(1).    
    }
	
	public void traverseCDLL() { // -------------------------------> O(1)
		if (head != null) {
			DoublyNode tempNode = head;
			for (int i = 0; i < size; i++) { // -------------------------------> O(N)
				System.out.print(tempNode.value);
				if(i != size-1) {
					System.out.print(" -> ");
				}
				tempNode = tempNode.next;
			}
		} else {
			System.out.println("The CDLL does not exist.");
		}
		System.out.println(); // -------------------------------> O(1)
		// -------- Time Complexity : O(N), Space Complexity : O(1). 
	}
	
	public void reverseTraversalCDLL() {
		if (head != null) { // -------------------------------> O(1)
			DoublyNode tempNode = tail;
			for(int i = 0; i < size; i++) { // -------------------------------> O(N)
				System.out.print(tempNode.value);
				if (i != size-1) {
					System.out.print(" <- ");
				}
				tempNode = tempNode.prev;
			}
		} else {
			System.out.println("The CDLL does not exist!"); // -------------------------------> O(1)
		}
	}
	
	public boolean searchNode(int nodeValue) {
		if (head != null) {
			DoublyNode tempNode = head;
			for(int i=0; i < size; i++) {
				if (tempNode.value == nodeValue) {
					System.out.println("The node is found at location: "+i);
					return true;
				}
				tempNode = tempNode.next;
			}
		}
		System.out.println("Node not found! ");
		return false;
	}
	
}







