package com.problems.stackproblems;

public class ImplementStack {


    private Node peak;   // Points to the top node of the stack
    private int length; // Tracks the number of elements in the stack

    // Constructor for Stack class
    public ImplementStack(int initialValue) {
        this.peak = new Node(initialValue); // Initialize top with a new Node
        this.length = 1; // Set height to 1 since the stack has one node
    }

    public void push(int value) {
        Node addedNode = new Node(value);

        if (length == 0) {
            peak = addedNode;
        } else {
            addedNode.next = peak;
            peak = addedNode;
        }
        length++;
    }
    
    // For demonstration purposes
    public int getPeakValue() {
        if (peak != null) {
            return peak.value;
        }
        return -1; // Return a dummy value if the stack is empty
    }

    // Method to peek at the top value without removing it
    public int peek() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty"); // Handle empty stack
        }
        return top.value; // Return the value of the top node
    }

    // Method to check if the stack is empty
    public boolean isEmpty() {
        return height == 0; // Return true if height is 0
    }

    // Method to get the current height of the stack
    public int getHeight() {
        return height; // Return the current height
    }

}
